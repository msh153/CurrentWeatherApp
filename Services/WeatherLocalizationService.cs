using System;
using System.Collections.Generic;
using Avalonia.Media.Imaging;
using Avalonia.Platform;

namespace WeatherAppAvalonia.Services
{
    public class WeatherLocalizationService
    {
        private readonly Dictionary<string, string> _desc = new()
        {
            ["Sunny"] = "–°–æ–Ω—è—á–Ω–æ ‚òÄÔ∏è",
            ["Clear"] = "–Ø—Å–Ω–æ üåû",
            ["Partly cloudy"] = "–ú—ñ–Ω–ª–∏–≤–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å üå§Ô∏è",
            ["Cloudy"] = "–•–º–∞—Ä–Ω–æ ‚òÅÔ∏è",
            ["Overcast"] = "–ü–æ—Ö–º—É—Ä–æ üå•Ô∏è",
            ["Mist"] = "–ú—Ä—è–∫–∞ üå´Ô∏è",
            ["Patchy rain nearby"] = "–ù–µ–≤–µ–ª–∏–∫—ñ –¥–æ—â—ñ –ø–æ—Ä—É—á üå¶Ô∏è",
            ["Light rain"] = "–ù–µ–≤–µ–ª–∏–∫–∏–π –¥–æ—â üåßÔ∏è",
            ["Heavy rain"] = "–°–∏–ª—å–Ω–∏–π –¥–æ—â ‚õàÔ∏è",
            ["Patchy rain possible"] = "–ú—ñ—Å—Ü—è–º–∏ –¥–æ—â üåßÔ∏è",
            ["Patchy snow possible"] = "–ú—ñ—Å—Ü—è–º–∏ —Å–Ω—ñ–≥ ‚ùÑÔ∏è",
            ["Patchy sleet possible"] = "–ú—ñ—Å—Ü—è–º–∏ –¥–æ—â –∑—ñ —Å–Ω—ñ–≥–æ–º üå®Ô∏è",
            ["Patchy freezing drizzle possible"] = "–ú—ñ—Å—Ü—è–º–∏ –æ–∂–µ–ª–µ–¥—å üåßÔ∏è",
            ["Thundery outbreaks possible"] = "–ú—ñ—Å—Ü—è–º–∏ –≥—Ä–æ–∑–∏ ‚ö°",
            ["Blowing snow"] = "–ó–∞–º–µ—Ç—ñ–ª—å ‚ùÑÔ∏è",
            ["Blizzard"] = "–°–Ω—ñ–≥–æ–≤–∞ –±—É—Ä—è ‚ùÑÔ∏è‚ùÑÔ∏è",
            ["Fog"] = "–¢—É–º–∞–Ω üåÅ",
            ["Freezing fog"] = "–ö—Ä–∏–∂–∞–Ω–∏–π —Ç—É–º–∞–Ω üå´Ô∏è",
            ["Patchy light drizzle"] = "–ú—ñ—Å—Ü—è–º–∏ –º—Ä—è–∫–∞ üå¶Ô∏è",
            ["Light drizzle"] = "–ú—Ä—è–∫–∞ üåßÔ∏è",
            ["Freezing drizzle"] = "–û–∂–µ–ª–µ–¥—å üåßÔ∏è",
            ["Heavy freezing drizzle"] = "–°–∏–ª—å–Ω–∞ –æ–∂–µ–ª–µ–¥—å üåßÔ∏è",
            ["Patchy light rain"] = "–ú—ñ—Å—Ü—è–º–∏ –Ω–µ–≤–µ–ª–∏–∫–∏–π –¥–æ—â üå¶Ô∏è",
            ["Moderate rain at times"] = "–ß–∞—Å–æ–º –ø–æ–º—ñ—Ä–Ω–∏–π –¥–æ—â üåßÔ∏è",
            ["Moderate rain"] = "–ü–æ–º—ñ—Ä–Ω–∏–π –¥–æ—â üåßÔ∏è",
            ["Heavy rain at times"] = "–ß–∞—Å–æ–º —Å–∏–ª—å–Ω–∏–π –¥–æ—â ‚õàÔ∏è",
            ["Heavy rain"] = "–°–∏–ª—å–Ω–∏–π –¥–æ—â ‚õàÔ∏è",
            ["Light freezing rain"] = "–°–ª–∞–±–∫–∏–π –∫—Ä–∏–∂–∞–Ω–∏–π –¥–æ—â üåßÔ∏è",
            ["Moderate or heavy freezing rain"] = "–ö—Ä–∏–∂–∞–Ω–∏–π –¥–æ—â üåßÔ∏è",
            ["Light sleet"] = "–ù–µ–≤–µ–ª–∏–∫–∏–π –¥–æ—â –∑—ñ —Å–Ω—ñ–≥–æ–º üå®Ô∏è",
            ["Moderate or heavy sleet"] = "–î–æ—â –∑—ñ —Å–Ω—ñ–≥–æ–º üå®Ô∏è",
            ["Patchy light snow"] = "–ú—ñ—Å—Ü—è–º–∏ –Ω–µ–≤–µ–ª–∏–∫–∏–π —Å–Ω—ñ–≥ ‚ùÑÔ∏è",
            ["Light snow"] = "–ù–µ–≤–µ–ª–∏–∫–∏–π —Å–Ω—ñ–≥ ‚ùÑÔ∏è",
            ["Patchy moderate snow"] = "–ú—ñ—Å—Ü—è–º–∏ –ø–æ–º—ñ—Ä–Ω–∏–π —Å–Ω—ñ–≥ ‚ùÑÔ∏è",
            ["Moderate snow"] = "–ü–æ–º—ñ—Ä–Ω–∏–π —Å–Ω—ñ–≥ ‚ùÑÔ∏è",
            ["Patchy heavy snow"] = "–ú—ñ—Å—Ü—è–º–∏ —Å–∏–ª—å–Ω–∏–π —Å–Ω—ñ–≥ ‚ùÑÔ∏è",
            ["Heavy snow"] = "–°–∏–ª—å–Ω–∏–π —Å–Ω—ñ–≥ ‚ùÑÔ∏è‚ùÑÔ∏è",
            ["Ice pellets"] = "–õ—å–æ–¥—è–Ω–∏–π –¥–æ—â üåßÔ∏è",
            ["Light rain shower"] = "–ù–µ–≤–µ–ª–∏–∫–∞ –∑–ª–∏–≤–∞ üå¶Ô∏è",
            ["Rain shower"] = "–ù–µ–≤–µ–ª–∏–∫–∞ –∑–ª–∏–≤–∞ üå¶Ô∏è",
            ["Moderate or heavy rain shower"] = "–ó–ª–∏–≤–∞ ‚õàÔ∏è",
            ["Torrential rain shower"] = "–î—É–∂–µ —Å–∏–ª—å–Ω–∞ –∑–ª–∏–≤–∞ ‚õàÔ∏è",
            ["Light sleet showers"] = "–ù–µ–≤–µ–ª–∏–∫–∏–π –º–æ–∫—Ä–∏–π —Å–Ω—ñ–≥ üå®Ô∏è",
            ["Moderate or heavy sleet showers"] = "–ú–æ–∫—Ä–∏–π —Å–Ω—ñ–≥ üå®Ô∏è",
            ["Light snow showers"] = "–ù–µ–≤–µ–ª–∏–∫–∏–π —Å–Ω—ñ–≥ ‚ùÑÔ∏è",
            ["Moderate or heavy snow showers"] = "–°–Ω—ñ–≥ ‚ùÑÔ∏è",
            ["Patchy light rain with thunder"] = "–ú—ñ—Å—Ü—è–º–∏ –¥–æ—â –∑ –≥—Ä–æ–∑–æ—é ‚õàÔ∏è",
            ["Moderate or heavy rain with thunder"] = "–î–æ—â –∑ –≥—Ä–æ–∑–æ—é ‚õàÔ∏è",
            ["Patchy light snow with thunder"] = "–ú—ñ—Å—Ü—è–º–∏ —Å–Ω—ñ–≥ –∑ –≥—Ä–æ–∑–æ—é ‚õàÔ∏è",
            ["Moderate or heavy snow with thunder"] = "–°–Ω—ñ–≥ –∑ –≥—Ä–æ–∑–æ—é ‚õàÔ∏è",
        };

        private readonly Dictionary<string, string> _icons = new()
        {
            ["Sunny"] = "sunny",
            ["Clear"] = "clear",
            ["Partly cloudy"] = "partlycloudy",
            ["Cloudy"] = "cloudy",
            ["Overcast"] = "mostlycloudy",
            ["Mist"] = "fog",
            ["Fog"] = "fog",
            ["Freezing fog"] = "hazy",

            ["Patchy rain nearby"] = "chancerain",
            ["Light rain"] = "rain",
            ["Rain shower"] = "rain",
            ["Moderate rain"] = "rain",
            ["Heavy rain"] = "rain",
            ["Patchy rain possible"] = "chancerain",
            ["Moderate rain at times"] = "chancerain",
            ["Heavy rain at times"] = "chancerain",
            ["Light rain shower"] = "chancerain",
            ["Moderate or heavy rain shower"] = "rain",

            ["Light drizzle"] = "chancerain",
            ["Patchy light drizzle"] = "chancerain",
            ["Freezing drizzle"] = "sleet",
            ["Heavy freezing drizzle"] = "sleet",

            ["Patchy snow possible"] = "chancesnow",
            ["Light snow"] = "snow",
            ["Heavy snow"] = "snow",
            ["Patchy light snow"] = "chancesnow",
            ["Patchy moderate snow"] = "chancesnow",
            ["Patchy heavy snow"] = "chancesnow",
            ["Moderate snow"] = "snow",

            ["Patchy sleet possible"] = "chancesleet",
            ["Light sleet"] = "sleet",
            ["Moderate or heavy sleet"] = "sleet",
            ["Light sleet showers"] = "chancesleet",
            ["Moderate or heavy sleet showers"] = "sleet",

            ["Thundery outbreaks possible"] = "chancetstorms",
            ["Patchy light rain with thunder"] = "chancetstorms",
            ["Moderate or heavy rain with thunder"] = "tstorms",
            ["Patchy light snow with thunder"] = "chancetstorms",
            ["Moderate or heavy snow with thunder"] = "tstorms",
            ["Torrential rain shower"] = "tstorms",

            ["Blowing snow"] = "flurries",
            ["Blizzard"] = "flurries",
            ["Ice pellets"] = "sleet",
        };

        public string Localize(string? desc) =>
            string.IsNullOrEmpty(desc) ? "–ù–µ–≤—ñ–¥–æ–º–æ" : _desc.TryGetValue(desc, out var result) ? result : desc;

        public Bitmap GetIcon(string? desc)
        {
            if (desc != null && _icons.TryGetValue(desc, out var iconName))
            {
                var uri = new Uri($"avares://WeatherAppAvalonia/Assets/WeatherIcons/{iconName}.png");
                if (AssetLoader.Exists(uri))
                    return new Bitmap(AssetLoader.Open(uri));
            }

            return new Bitmap("Assets/WeatherIcons/unknown.png");
        }
    }
}
