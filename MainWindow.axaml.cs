// MainWindow.axaml.cs
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using Avalonia.Controls;
using Avalonia.Media.Imaging;
using Avalonia.Threading;
using Avalonia.Input;
using Avalonia.VisualTree;
using Avalonia.Platform;

namespace WeatherAppAvalonia
{
    public class WttrResponse
    {
        [JsonPropertyName("current_condition")]
        public List<CurrentCondition>? CurrentCondition { get; set; }

        [JsonPropertyName("nearest_area")]
        public List<NearestArea>? NearestArea { get; set; }
    }

    public class CurrentCondition
    {
        [JsonPropertyName("temp_C")]
        public string? TempC { get; set; }

        [JsonPropertyName("weatherDesc")]
        public List<NameValue>? WeatherDesc { get; set; }
    }

    public class NearestArea
    {
        [JsonPropertyName("areaName")]
        public List<NameValue>? AreaName { get; set; }
    }

    public class NameValue
    {
        [JsonPropertyName("value")]
        public string? Value { get; set; }
    }

    public partial class MainWindow : Window
    {
        private static readonly HttpClient httpClient = new HttpClient();
        private DateTime lastUpdate = DateTime.MinValue;
        private string? lastCity = string.Empty;
        
        public MainWindow()
        {
            InitializeComponent();

            var timer = new DispatcherTimer { Interval = TimeSpan.FromMinutes(10) };
            timer.Tick += async (_, _) =>
            {
                await FetchWeatherData(lastCity, force: false);
            };
            timer.Start();
        }

        private async void OnRefreshButtonClick(object? sender, Avalonia.Interactivity.RoutedEventArgs e)
        {
            lastCity = CityTextBox.Text;
            await FetchWeatherData(lastCity, force: true);
        }

        private void CityTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                OnRefreshButtonClick(this, new Avalonia.Interactivity.RoutedEventArgs());
            }
        }

        private async Task FetchWeatherData(string? city, bool force = false)
        {
            if (!force && lastUpdate != DateTime.MinValue && (DateTime.Now - lastUpdate).TotalMinutes < 10)
                return;

            StatusBlock.Text = string.Empty;

            string cityInput =  CityTextBox?.Text?.Trim();
            Console.WriteLine(cityInput);
            if (string.IsNullOrWhiteSpace(cityInput))
            {
                StatusBlock.Text = "–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ IP‚Ä¶";
            }
            else
            {
                StatusBlock.Text = "";
            }
            
            string url = "https://wttr.in/" + (string.IsNullOrEmpty(cityInput) ? "" : $"{Uri.EscapeDataString(cityInput)}") + "?format=j1";

            try
            {
                var response = await httpClient.GetAsync(url);
                response.EnsureSuccessStatusCode(); 
                var json = await response.Content.ReadAsStringAsync();

                var data = JsonSerializer.Deserialize<WttrResponse>(json);
                if (data == null || data.CurrentCondition == null || data.CurrentCondition.Count == 0)
                {
                    throw new JsonException("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API");
                }

                // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –∑ nearest_area
                string? cityName = data.NearestArea?[0]?.AreaName?[0]?.Value;
                if (string.IsNullOrEmpty(cityName))
                {
                    StatusBlock.Text = "–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API.";
                    return;
                }

                if (!string.IsNullOrWhiteSpace(cityInput) &&
                    !string.Equals(cityInput, cityName, StringComparison.OrdinalIgnoreCase))
                {
                    StatusBlock.Text = $"–ú—ñ—Å—Ç–æ '{cityInput}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∫–∞–∑–∞–Ω–æ '{cityName}'.";
                }

                CityNameBlock.Text = cityName;
                TempBlock.Text = $"{data.CurrentCondition[0].TempC} ¬∞C";

                string? descEn = data.CurrentCondition[0].WeatherDesc?[0]?.Value;
                DescBlock.Text = LocalizeDescription(descEn ?? "–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ñ–¥—Å—É—Ç–Ω—è");

                if (descEn != null && IconMap.TryGetValue(descEn, out string iconName))
                {
                    var uri = new Uri($"avares://WeatherAppAvalonia/Assets/WeatherIcons/{iconName}.png");

                    if (AssetLoader.Exists(uri))
                    {
                        var stream = AssetLoader.Open(uri);
                        WeatherIcon.Source = new Bitmap(stream);
                    }
                    else
                    {
                        WeatherIcon.Source = new Bitmap($"Assets/WeatherIcons/unknown.png");
                    }
                }
                else
                {
                    WeatherIcon.Source = new Bitmap($"Assets/WeatherIcons/unknown.png");
                }

                lastUpdate = DateTime.Now;
            }
            catch (HttpRequestException ex)
            {
                StatusBlock.Text = "–ü–æ–º–∏–ª–∫–∞ HTTP: " + ex.Message;
            }
            catch (JsonException ex)
            {
                StatusBlock.Text = "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö: " + ex.Message;
            }
            catch (Exception ex)
            {
                StatusBlock.Text = "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: " + ex.Message;
            }
        }

        private string LocalizeDescription(string desc)
        {
            if (string.IsNullOrEmpty(desc)) return desc;

            var dict = new Dictionary<string, string>()
            {
                ["Sunny"] = "–°–æ–Ω—è—á–Ω–æ ‚òÄÔ∏è",
                ["Clear"] = "–Ø—Å–Ω–æ üåû",
                ["Partly cloudy"] = "–ú—ñ–Ω–ª–∏–≤–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å üå§Ô∏è",
                ["Cloudy"] = "–•–º–∞—Ä–Ω–æ ‚òÅÔ∏è",
                ["Overcast"] = "–ü–æ—Ö–º—É—Ä–æ üå•Ô∏è",
                ["Mist"] = "–ú—Ä—è–∫–∞ üå´Ô∏è",
                ["Patchy rain nearby"] = "–ù–µ–≤–µ–ª–∏–∫—ñ –¥–æ—â—ñ –ø–æ—Ä—É—á üå¶Ô∏è",
                ["Light rain"] = "–ù–µ–≤–µ–ª–∏–∫–∏–π –¥–æ—â üåßÔ∏è",
                ["Heavy rain"] = "–°–∏–ª—å–Ω–∏–π –¥–æ—â ‚õàÔ∏è",
                ["Patchy rain possible"] = "–ú—ñ—Å—Ü—è–º–∏ –¥–æ—â üåßÔ∏è",
                ["Patchy snow possible"] = "–ú—ñ—Å—Ü—è–º–∏ —Å–Ω—ñ–≥ ‚ùÑÔ∏è",
                ["Patchy sleet possible"] = "–ú—ñ—Å—Ü—è–º–∏ –¥–æ—â –∑—ñ —Å–Ω—ñ–≥–æ–º üå®Ô∏è",
                ["Patchy freezing drizzle possible"] = "–ú—ñ—Å—Ü—è–º–∏ –æ–∂–µ–ª–µ–¥—å üåßÔ∏è",
                ["Thundery outbreaks possible"] = "–ú—ñ—Å—Ü—è–º–∏ –≥—Ä–æ–∑–∏ ‚ö°",
                ["Blowing snow"] = "–ó–∞–º–µ—Ç—ñ–ª—å ‚ùÑÔ∏è",
                ["Blizzard"] = "–°–Ω—ñ–≥–æ–≤–∞ –±—É—Ä—è ‚ùÑÔ∏è‚ùÑÔ∏è",
                ["Fog"] = "–¢—É–º–∞–Ω üåÅ",
                ["Freezing fog"] = "–ö—Ä–∏–∂–∞–Ω–∏–π —Ç—É–º–∞–Ω üå´Ô∏è",
                ["Patchy light drizzle"] = "–ú—ñ—Å—Ü—è–º–∏ –º—Ä—è–∫–∞ üå¶Ô∏è",
                ["Light drizzle"] = "–ú—Ä—è–∫–∞ üåßÔ∏è",
                ["Freezing drizzle"] = "–û–∂–µ–ª–µ–¥—å üåßÔ∏è",
                ["Heavy freezing drizzle"] = "–°–∏–ª—å–Ω–∞ –æ–∂–µ–ª–µ–¥—å üåßÔ∏è",
                ["Patchy light rain"] = "–ú—ñ—Å—Ü—è–º–∏ –Ω–µ–≤–µ–ª–∏–∫–∏–π –¥–æ—â üå¶Ô∏è",
                ["Moderate rain at times"] = "–ß–∞—Å–æ–º –ø–æ–º—ñ—Ä–Ω–∏–π –¥–æ—â üåßÔ∏è",
                ["Moderate rain"] = "–ü–æ–º—ñ—Ä–Ω–∏–π –¥–æ—â üåßÔ∏è",
                ["Heavy rain at times"] = "–ß–∞—Å–æ–º —Å–∏–ª—å–Ω–∏–π –¥–æ—â ‚õàÔ∏è",
                ["Heavy rain"] = "–°–∏–ª—å–Ω–∏–π –¥–æ—â ‚õàÔ∏è",
                ["Light freezing rain"] = "–°–ª–∞–±–∫–∏–π –∫—Ä–∏–∂–∞–Ω–∏–π –¥–æ—â üåßÔ∏è",
                ["Moderate or heavy freezing rain"] = "–ö—Ä–∏–∂–∞–Ω–∏–π –¥–æ—â üåßÔ∏è",
                ["Light sleet"] = "–ù–µ–≤–µ–ª–∏–∫–∏–π –¥–æ—â –∑—ñ —Å–Ω—ñ–≥–æ–º üå®Ô∏è",
                ["Moderate or heavy sleet"] = "–î–æ—â –∑—ñ —Å–Ω—ñ–≥–æ–º üå®Ô∏è",
                ["Patchy light snow"] = "–ú—ñ—Å—Ü—è–º–∏ –Ω–µ–≤–µ–ª–∏–∫–∏–π —Å–Ω—ñ–≥ ‚ùÑÔ∏è",
                ["Light snow"] = "–ù–µ–≤–µ–ª–∏–∫–∏–π —Å–Ω—ñ–≥ ‚ùÑÔ∏è",
                ["Patchy moderate snow"] = "–ú—ñ—Å—Ü—è–º–∏ –ø–æ–º—ñ—Ä–Ω–∏–π —Å–Ω—ñ–≥ ‚ùÑÔ∏è",
                ["Moderate snow"] = "–ü–æ–º—ñ—Ä–Ω–∏–π —Å–Ω—ñ–≥ ‚ùÑÔ∏è",
                ["Patchy heavy snow"] = "–ú—ñ—Å—Ü—è–º–∏ —Å–∏–ª—å–Ω–∏–π —Å–Ω—ñ–≥ ‚ùÑÔ∏è",
                ["Heavy snow"] = "–°–∏–ª—å–Ω–∏–π —Å–Ω—ñ–≥ ‚ùÑÔ∏è‚ùÑÔ∏è",
                ["Ice pellets"] = "–õ—å–æ–¥—è–Ω–∏–π –¥–æ—â üåßÔ∏è",
                ["Light rain shower"] = "–ù–µ–≤–µ–ª–∏–∫–∞ –∑–ª–∏–≤–∞ üå¶Ô∏è",
                ["Rain shower"] = "–ù–µ–≤–µ–ª–∏–∫–∞ –∑–ª–∏–≤–∞ üå¶Ô∏è",
                ["Moderate or heavy rain shower"] = "–ó–ª–∏–≤–∞ ‚õàÔ∏è",
                ["Torrential rain shower"] = "–î—É–∂–µ —Å–∏–ª—å–Ω–∞ –∑–ª–∏–≤–∞ ‚õàÔ∏è",
                ["Light sleet showers"] = "–ù–µ–≤–µ–ª–∏–∫–∏–π –º–æ–∫—Ä–∏–π —Å–Ω—ñ–≥ üå®Ô∏è",
                ["Moderate or heavy sleet showers"] = "–ú–æ–∫—Ä–∏–π —Å–Ω—ñ–≥ üå®Ô∏è",
                ["Light snow showers"] = "–ù–µ–≤–µ–ª–∏–∫–∏–π —Å–Ω—ñ–≥ ‚ùÑÔ∏è",
                ["Moderate or heavy snow showers"] = "–°–Ω—ñ–≥ ‚ùÑÔ∏è",
                ["Patchy light rain with thunder"] = "–ú—ñ—Å—Ü—è–º–∏ –¥–æ—â –∑ –≥—Ä–æ–∑–æ—é ‚õàÔ∏è",
                ["Moderate or heavy rain with thunder"] = "–î–æ—â –∑ –≥—Ä–æ–∑–æ—é ‚õàÔ∏è",
                ["Patchy light snow with thunder"] = "–ú—ñ—Å—Ü—è–º–∏ —Å–Ω—ñ–≥ –∑ –≥—Ä–æ–∑–æ—é ‚õàÔ∏è",
                ["Moderate or heavy snow with thunder"] = "–°–Ω—ñ–≥ –∑ –≥—Ä–æ–∑–æ—é ‚õàÔ∏è",
            };
            
            return dict.ContainsKey(desc) ? dict[desc] : desc;
        }

        private readonly Dictionary<string, string> IconMap = new()
        {
            ["Sunny"] = "sunny",
            ["Clear"] = "clear",
            ["Partly cloudy"] = "partlycloudy",
            ["Cloudy"] = "cloudy",
            ["Overcast"] = "mostlycloudy",
            ["Mist"] = "fog",
            ["Fog"] = "fog",
            ["Freezing fog"] = "hazy",

            ["Patchy rain nearby"] = "chancerain",
            ["Light rain"] = "rain",
            ["Rain shower"] = "rain",
            ["Moderate rain"] = "rain",
            ["Heavy rain"] = "rain",
            ["Patchy rain possible"] = "chancerain",
            ["Moderate rain at times"] = "chancerain",
            ["Heavy rain at times"] = "chancerain",
            ["Light rain shower"] = "chancerain",
            ["Moderate or heavy rain shower"] = "rain",

            ["Light drizzle"] = "chancerain",
            ["Patchy light drizzle"] = "chancerain",
            ["Freezing drizzle"] = "sleet",
            ["Heavy freezing drizzle"] = "sleet",

            ["Patchy snow possible"] = "chancesnow",
            ["Light snow"] = "snow",
            ["Heavy snow"] = "snow",
            ["Patchy light snow"] = "chancesnow",
            ["Patchy moderate snow"] = "chancesnow",
            ["Patchy heavy snow"] = "chancesnow",
            ["Moderate snow"] = "snow",

            ["Patchy sleet possible"] = "chancesleet",
            ["Light sleet"] = "sleet",
            ["Moderate or heavy sleet"] = "sleet",
            ["Light sleet showers"] = "chancesleet",
            ["Moderate or heavy sleet showers"] = "sleet",

            ["Thundery outbreaks possible"] = "chancetstorms",
            ["Patchy light rain with thunder"] = "chancetstorms",
            ["Moderate or heavy rain with thunder"] = "tstorms",
            ["Patchy light snow with thunder"] = "chancetstorms",
            ["Moderate or heavy snow with thunder"] = "tstorms",
            ["Torrential rain shower"] = "tstorms",

            ["Blowing snow"] = "flurries",
            ["Blizzard"] = "flurries",
            ["Ice pellets"] = "sleet",
        };
    }
}
